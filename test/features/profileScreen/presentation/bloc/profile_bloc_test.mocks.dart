// Mocks generated by Mockito 5.4.6 from annotations
// in skillwave/test/features/profileScreen/presentation/bloc/profile_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:skillwave/cores/network/models/skillwave_response.dart' as _i3;
import 'package:skillwave/features/profileScreen/domin/entity/user_entity.dart'
    as _i6;
import 'package:skillwave/features/profileScreen/domin/repository/profile_repository.dart'
    as _i2;
import 'package:skillwave/features/profileScreen/domin/usecases/get_user_profile_usecase.dart'
    as _i4;
import 'package:skillwave/features/profileScreen/domin/usecases/update_profile_picture_useCase.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProfileRepository_0 extends _i1.SmartFake
    implements _i2.IProfileRepository {
  _FakeIProfileRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSkillWaveResponse_1<T> extends _i1.SmartFake
    implements _i3.SkillWaveResponse<T> {
  _FakeSkillWaveResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetUserProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserProfileUseCase extends _i1.Mock
    implements _i4.GetUserProfileUseCase {
  MockGetUserProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProfileRepository);

  @override
  _i5.Future<_i3.SkillWaveResponse<_i6.UserEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.SkillWaveResponse<_i6.UserEntity>>.value(
                  _FakeSkillWaveResponse_1<_i6.UserEntity>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.SkillWaveResponse<_i6.UserEntity>>);
}

/// A class which mocks [UpdateProfilePictureUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfilePictureUseCase extends _i1.Mock
    implements _i7.UpdateProfilePictureUseCase {
  MockUpdateProfilePictureUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProfileRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeIProfileRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.IProfileRepository);

  @override
  _i5.Future<_i3.SkillWaveResponse<void>> call(_i8.File? imageFile) =>
      (super.noSuchMethod(
            Invocation.method(#call, [imageFile]),
            returnValue: _i5.Future<_i3.SkillWaveResponse<void>>.value(
              _FakeSkillWaveResponse_1<void>(
                this,
                Invocation.method(#call, [imageFile]),
              ),
            ),
          )
          as _i5.Future<_i3.SkillWaveResponse<void>>);
}
