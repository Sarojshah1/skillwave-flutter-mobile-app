// Mocks generated by Mockito 5.4.6 from annotations
// in skillwave/test/features/auth/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:skillwave/cores/network/models/skillwave_response.dart' as _i2;
import 'package:skillwave/features/auth/domian/entity/login_entity.dart' as _i8;
import 'package:skillwave/features/auth/domian/entity/sign_up_entity.dart'
    as _i5;
import 'package:skillwave/features/auth/domian/usecases/create_user_usecase.dart'
    as _i3;
import 'package:skillwave/features/auth/domian/usecases/forget_password_usecase.dart'
    as _i11;
import 'package:skillwave/features/auth/domian/usecases/login_usecase.dart'
    as _i7;
import 'package:skillwave/features/auth/domian/usecases/send_oto_usecase.dart'
    as _i9;
import 'package:skillwave/features/auth/domian/usecases/verify_otp_usecase.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSkillWaveResponse_0<T> extends _i1.SmartFake
    implements _i2.SkillWaveResponse<T> {
  _FakeSkillWaveResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CreateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateUserUseCase extends _i1.Mock implements _i3.CreateUserUseCase {
  MockCreateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SkillWaveResponse<bool>> call(
    _i5.SignUpEntity? user,
    _i6.File? profilePicture,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [user, profilePicture]),
            returnValue: _i4.Future<_i2.SkillWaveResponse<bool>>.value(
              _FakeSkillWaveResponse_0<bool>(
                this,
                Invocation.method(#call, [user, profilePicture]),
              ),
            ),
          )
          as _i4.Future<_i2.SkillWaveResponse<bool>>);
}

/// A class which mocks [LogInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInUseCase extends _i1.Mock implements _i7.LogInUseCase {
  MockLogInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SkillWaveResponse<bool>> call(_i8.LogInEntity? entity) =>
      (super.noSuchMethod(
            Invocation.method(#call, [entity]),
            returnValue: _i4.Future<_i2.SkillWaveResponse<bool>>.value(
              _FakeSkillWaveResponse_0<bool>(
                this,
                Invocation.method(#call, [entity]),
              ),
            ),
          )
          as _i4.Future<_i2.SkillWaveResponse<bool>>);
}

/// A class which mocks [SendOtpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendOtpUseCase extends _i1.Mock implements _i9.SendOtpUseCase {
  MockSendOtpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SkillWaveResponse<String>> call(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#call, [email]),
            returnValue: _i4.Future<_i2.SkillWaveResponse<String>>.value(
              _FakeSkillWaveResponse_0<String>(
                this,
                Invocation.method(#call, [email]),
              ),
            ),
          )
          as _i4.Future<_i2.SkillWaveResponse<String>>);
}

/// A class which mocks [VerifyOtpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyOtpUseCase extends _i1.Mock implements _i10.VerifyOtpUseCase {
  MockVerifyOtpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SkillWaveResponse<String>> call(String? otp, String? email) =>
      (super.noSuchMethod(
            Invocation.method(#call, [otp, email]),
            returnValue: _i4.Future<_i2.SkillWaveResponse<String>>.value(
              _FakeSkillWaveResponse_0<String>(
                this,
                Invocation.method(#call, [otp, email]),
              ),
            ),
          )
          as _i4.Future<_i2.SkillWaveResponse<String>>);
}

/// A class which mocks [ForgetPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgetPasswordUseCase extends _i1.Mock
    implements _i11.ForgetPasswordUseCase {
  MockForgetPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SkillWaveResponse<String>> call(
    String? password,
    String? email,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [password, email]),
            returnValue: _i4.Future<_i2.SkillWaveResponse<String>>.value(
              _FakeSkillWaveResponse_0<String>(
                this,
                Invocation.method(#call, [password, email]),
              ),
            ),
          )
          as _i4.Future<_i2.SkillWaveResponse<String>>);
}
